{"/home/travis/build/npmtest/node-npmtest-sprity/test.js":"/* istanbul instrument in package npmtest_sprity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sprity/lib.npmtest_sprity.js":"/* istanbul instrument in package npmtest_sprity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sprity = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sprity = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sprity/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sprity && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sprity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sprity\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sprity.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sprity.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sprity.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sprity.__dirname + '/lib.npmtest_sprity.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sprity/node_modules/sprity/index.js":"'use strict';\n\nvar _ = require('lodash');\nvar vfs = require('vinyl-fs');\nvar ifStream = require('ternary-stream');\nvar through2 = require('through2').obj;\n\nvar tile = require('./lib/tile');\nvar layout = require('./lib/layout');\nvar sprite = require('./lib/sprite');\nvar style = require('./lib/style');\nvar toVinyl = require('./lib/to-vinyl');\nvar noop = function () {};\nvar error = null;\n\nvar defaults = {\n  'src': null,\n  'out': '',\n  'name': 'sprite',\n  'style': null,\n  'dimension': [{ratio: 1, dpi: 72}],\n  'engine': 'lwip',\n  'cssPath': '../images',\n  'processor': 'css',\n  'template': null,\n  'orientation': 'vertical',\n  'background': '#FFFFFF',\n  'margin': 4,\n  'opacity': 0,\n  'sort': true,\n  'split': false,\n  'style-indent-char': 'space',\n  'style-indent-size': 2,\n  'logger': {\n    log: noop,\n    warn: noop,\n    debug: noop,\n    error: noop,\n    success: noop\n  }\n};\n\nvar handleError = function () {\n  return function (err) {\n    error = true;\n    this.push(err);\n  };\n};\n\nvar handleCallbackError = function (cb) {\n  return function (err) {\n    error = true;\n    if (_.isFunction(cb)) {\n      cb(err);\n    }\n  };\n};\n\nmodule.exports = {\n  /*\n   *  creates sprite and style file and save them to disk\n   */\n  create: function (o, cb) {\n    if (!o.out) {\n      throw new Error('output dir missing');\n    }\n\n    this.src(o)\n      .on('error', handleCallbackError(cb))\n      .pipe(vfs.dest(function (file) {\n        return file.base;\n      }))\n      .on('error', handleCallbackError(cb))\n      .on('end', function () {\n        if (_.isFunction(cb) && !error) {\n          cb();\n        }\n      });\n  },\n  /*\n   *  returns a Readable/Writable stream of vinyl objects with sprite and style files\n   */\n  src: function (o) {\n    if (!o.src) {\n      throw new Error('src dir missing');\n    }\n\n    var opts = _.extend({}, defaults, o);\n\n    var hasStyle = function () {\n      return !!opts.style;\n    };\n\n    var stream = vfs.src(opts.src)\n      .pipe(tile(opts))\n      .on('error', handleError())\n      .pipe(layout(opts))\n      .on('error', handleError())\n      .pipe(sprite(opts))\n      .on('error', handleError())\n      .pipe(ifStream(hasStyle, style(opts)))\n      .on('error', handleError())\n      .pipe(toVinyl(opts))\n      .on('error', handleError())\n      .pipe(through2(function (obj, enc, cb) {\n        if (obj instanceof Error) {\n          cb(obj, null);\n        }\n        else {\n          cb(null, obj);\n        }\n      }));\n\n    return stream;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sprity/node_modules/sprity/lib/tile.js":"'use strict';\n\nvar Promise = require('bluebird');\nvar through2 = require('through2');\nvar imageinfo = require('imageinfo');\nvar parsePath = require('parse-filepath');\nvar fs = Promise.promisifyAll(require('fs-extra'));\n\nvar Err = require('./util/error');\nvar log;\n\nvar createTileObj = function (image, opt) {\n  return function (stats) {\n    if (stats.isFile()) {\n      var info = imageinfo(image.contents);\n      if (info) {\n        var name, base;\n        if (opt.split) {\n          var imagePath = parsePath(image.relative);\n          base = imagePath.dirname.replace(/\\/|\\\\|\\ /g, '-');\n          name = imagePath.name.replace(/\\/|\\\\|\\ /g, '-');\n        }\n        else {\n          base = image.base;\n          name = parsePath(image.relative.replace(/\\/|\\\\|\\ /g, '-')).name;\n        }\n        var tileObj = {\n          base: base,\n          contents: image.contents,\n          fileName: image.relative,\n          height: info.height,\n          name: name,\n          path: image.path,\n          type: info.format.toLowerCase(),\n          width: info.width\n        };\n        return Promise.resolve(tileObj);\n      }\n      else {\n        throw new Err.TileError(image.path + ' is not an image', image);\n      }\n    }\n    else {\n      throw new Err.TileError(image.path + ' does not exist', image);\n    }\n  };\n};\n\nmodule.exports = function (opt) {\n  log = opt.logger;\n\n  return through2.obj(function (image, enc, cb) {\n    if (image instanceof Error) {\n      cb(image);\n    }\n    else {\n      fs.statAsync(image.path)\n        .then(createTileObj(image, opt))\n        .then(function (tile) {\n          cb(null, tile);\n        })\n        .catch(Err.TileError, function (err) {\n          log.warn('Ignoring ' + err.image.path);\n          cb(null, null);\n        });\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-sprity/node_modules/sprity/lib/util/error.js":"'use strict';\n\nfunction TileError (message, image) {\n  this.name = 'TileError';\n  this.message = message || 'Error generating tile';\n  this.image = image;\n}\nTileError.prototype = Object.create(Error.prototype);\nTileError.prototype.constructor = TileError;\n\nfunction PluggableError (message, pluggable) {\n  this.name = 'PluggableError';\n  this.message = message || 'Error finding module';\n  this.reason = 'This error gets triggered when the used image engine or style processor is not installed. For example to use sass as the style processor install sprity-sass first.';\n  this.pluggable = pluggable;\n}\nPluggableError.prototype = Object.create(Error.prototype);\nPluggableError.prototype.constructor = PluggableError;\n\nfunction LayoutError (message) {\n  this.name = 'LayoutError';\n  this.message = message || 'No layouts created';\n  this.reason = 'This error is most likely triggered by a wrong src glob used. You need to give a glob that gets evaluated to image files. For example \\'./src/images/*.png\\' will work but \\'./src/images/\\' won\\'t.\\nYou can read more about globs here: https://github.com/isaacs/node-glob#glob-primer';\n}\nLayoutError.prototype = Object.create(Error.prototype);\nLayoutError.prototype.constructor = LayoutError;\n\n\nmodule.exports = {\n  TileError: TileError,\n  PluggableError: PluggableError,\n  LayoutError: LayoutError\n};\n","/home/travis/build/npmtest/node-npmtest-sprity/node_modules/sprity/lib/layout.js":"'use strict';\n\nvar _ = require('lodash');\nvar layout = require('layout');\nvar through2 = require('through2');\nvar path = require('path');\nvar Err = require('./util/error');\n\nvar getOrientation = function (opt) {\n  if (opt.orientation === 'vertical') {\n    return 'top-down';\n  }\n  else {\n    return opt.orientation === 'horizontal' ? 'left-right' : 'binary-tree';\n  }\n};\n\nvar getClassName = function (name, opt) {\n  var sep = '';\n  if (name === 'default') {\n    name = '';\n  }\n  if (name.length > 0) {\n    sep = '-';\n  }\n  if (opt.prefix) {\n    return opt.prefix + sep + name;\n  }\n  else {\n    return 'icon' + sep + name;\n  }\n};\n\nvar addTile = function (opt) {\n  return function (tile, enc, cb) {\n    if (tile instanceof Error) {\n      cb(tile);\n    }\n    else {\n      if (tile && tile.base && tile.width && tile.height) {\n        var name = opt.split ? path.basename(tile.base) : 'default';\n        if (!opt.layouts[name]) {\n          opt.layouts[name] = layout(getOrientation(opt), {'sort': opt.sort});\n        }\n        var height = tile.height + 2 * opt.margin;\n        var width = tile.width + 2 * opt.margin;\n        opt.layouts[name].addItem({\n          height: height,\n          width: width,\n          meta: tile\n        });\n      }\n      cb();\n    }\n  };\n};\n\nvar pushLayouts = function (opt) {\n  return function (cb) {\n    var stream = this;\n    if (_.keys(opt.layouts).length === 0) {\n      var e = new Err.LayoutError();\n      stream.emit('error', e);\n    }\n    else {\n      _.each(opt.layouts, function (l, key) {\n        stream.push({\n          name: key,\n          classname: getClassName(key, opt),\n          layout: l.export()\n        });\n      });\n    }\n    cb();\n  };\n};\n\nmodule.exports = function (opt) {\n  opt.layouts = {};\n  return through2.obj(addTile(opt), pushLayouts(opt));\n};\n","/home/travis/build/npmtest/node-npmtest-sprity/node_modules/sprity/lib/sprite.js":"'use strict';\n\nvar _ = require('lodash');\nvar Promise = require('bluebird');\nvar through2 = require('through2');\nvar crypto = require('crypto');\nvar url = require('url');\nvar Color = require('color');\nvar path = require('path');\n\nvar moduleRequire = require('./util/require');\n\nvar engine, log;\n\nvar getUrl = function (opt, name, img) {\n  var cachebuster = !opt.cachebuster ? '' : '?' + crypto.createHash('sha1').update(img.contents).digest('hex');\n  if (opt.cssPath.indexOf('//') > -1) {\n    return url.resolve(opt.cssPath, name + '.' + img.type) + cachebuster;\n  }\n  else {\n    return path.join(opt.cssPath, name + '.' + img.type).replace(/\\\\/g, '/') + cachebuster;\n  }\n};\n\nvar getName = function (dim, name) {\n  return dim.ratio === 1 ? name : name + '@' + dim.ratio + 'x';\n};\n\nvar renderSprite = function (layout, ratio, opt) {\n  var opacity = opt.opacity;\n  var backgroundColor = new Color(opt.background);\n  backgroundColor = backgroundColor.rgbArray();\n  backgroundColor.push(opacity);\n  var tiles = [];\n  _.each(layout.layout.items, function (tile) {\n    tiles.push({\n      height: tile.meta.height,\n      width: tile.meta.width,\n      x: tile.x,\n      y: tile.y,\n      type: tile.meta.type,\n      offset: opt.margin,\n      contents: tile.meta.contents,\n      path: tile.meta.path\n    });\n  });\n  return engine.create(tiles, {\n    width: layout.layout.width,\n    height: layout.layout.height,\n    bgColor: backgroundColor,\n    log: log,\n    options: opt\n  });\n};\n\nvar scaleSprite = function (base, ratio, opt) {\n  var scale = ratio / base.ratio;\n  var width = Math.floor(base.width * scale);\n  var height = Math.floor(base.height * scale);\n  return engine.scale(base, {\n    scale: scale,\n    width: width,\n    height: height,\n    log: log,\n    options: opt\n  });\n};\n\nvar calcBaseSize = function (size, ratio, baseRatio) {\n  return Math.round(size * (baseRatio / ratio));\n};\n\nvar sortByDim = function (a, b) {\n  return a.ratio - b.ratio;\n};\n\nvar createSprite = function (dim, layout, opt, base) {\n  var image;\n  var name = getName(dim, layout.name === 'default' ? opt.name : opt.name + '-' + layout.name);\n  if (!base) {\n    image = renderSprite(layout, dim.ratio, opt);\n  }\n  else {\n    image = scaleSprite(base, dim.ratio, opt);\n  }\n  return image.then(function (img) {\n    var spriteUrl = getUrl(opt, name, img);\n    var baseDim = _.find(opt.dimension, {'default': true});\n    if (opt.base64) {\n      spriteUrl = 'data:' + img.mimeType + ';base64,' + img.contents.toString('base64');\n    }\n    return Promise.resolve({\n      name: name,\n      url: spriteUrl,\n      type: img.type,\n      contents: img.contents,\n      dpi: dim.default ? null : dim.dpi,\n      ratio: dim.default ? null : dim.ratio,\n      width: img.width,\n      height: img.height,\n      baseWidth: calcBaseSize(img.width, dim.ratio, baseDim.ratio),\n      baseHeight: calcBaseSize(img.height, dim.ratio, baseDim.ratio)\n    });\n  });\n};\n\nvar createOtherSprites = function (dim, layout, opt, baseSprite) {\n  return Promise.map(dim, function (d) {\n      return createSprite(d, layout, opt, baseSprite);\n    });\n};\n\nvar createSprites = function (opt) {\n  return function (layout, enc, cb) {\n    if (layout instanceof Error) {\n      cb(layout);\n    }\n    else {\n      if (layout) {\n        layout.sprites = [];\n        opt.dimension.sort(sortByDim).reverse();\n        opt.dimension[opt.dimension.length - 1].default = true;\n\n        createSprite(opt.dimension[0], layout, opt)\n          .then(function (baseSprite) {\n            layout.sprites.push(baseSprite);\n            return opt.dimension.length > 1 ? createOtherSprites(opt.dimension.slice(1), layout, opt, baseSprite) : true;\n          })\n          .then(function (otherSprites) {\n            if (_.isArray(otherSprites)) {\n              Array.prototype.push.apply(layout.sprites, otherSprites);\n            }\n            layout.sprites.reverse();\n            cb(null, layout);\n          });\n      }\n      else {\n        cb();\n      }\n    }\n  };\n};\n\nmodule.exports = function (opt) {\n  log = opt.logger;\n\n  var stream = through2.obj(createSprites(opt));\n  try {\n    if (_.isString(opt.engine)) {\n      engine = moduleRequire(opt.engine);\n    }\n    else {\n      engine = opt.engine;\n    }\n  }\n  catch (e) {\n    log.error(e.message);\n    if (opt.cli) {\n      log.debug('Install the image processing engine with `npm install <engine-name> -g`');\n    }\n    else {\n      log.debug('Install the image processing engine with `npm install <engine-name>`');\n    }\n    stream.emit('error', e);\n  }\n\n  return stream;\n};\n","/home/travis/build/npmtest/node-npmtest-sprity/node_modules/sprity/lib/util/require.js":"'use strict';\n\nvar Err = require('./error');\n\nmodule.exports = function (mod) {\n  var loadModule = null;\n\n  try {\n    loadModule = 'sprity-' + mod;\n    return require('sprity-' + mod);\n  }\n  catch(e) {\n    loadModule = null;\n  }\n\n  if (!loadModule) {\n    try {\n      loadModule = mod;\n      return require(mod);\n    }\n    catch(e) {\n      throw new Err.PluggableError(mod + ' not found.', mod);\n    }\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-sprity/node_modules/sprity/lib/style.js":"'use strict';\n\nvar _ = require('lodash');\nvar Promise = require('bluebird');\nvar through2 = require('through2');\nvar Handlebars = require('handlebars');\nvar path = require('path');\nvar fs = Promise.promisifyAll(require('fs-extra'));\nvar cssesc = require('cssesc');\nvar prettydiff = require('prettydiff');\n\nvar moduleRequire = require('./util/require');\nvar layouts = [], processor, log, ratio;\n\nHandlebars.registerHelper('cssesc', function (value) {\n  return value && value.length > 0 ? cssesc(value, {isIdentifier: true}) : '';\n});\n\nHandlebars.registerHelper('escimage', function (img) {\n  return img.replace(/['\"\\(\\)\\s]/g, function encodeCssUri (chr) {\n    return '%' + chr.charCodeAt(0).toString(16);\n  });\n});\n\nHandlebars.registerHelper('baseDim', function (size) {\n  return Math.round(size * ratio);\n});\n\nvar sortByDim = function (a, b) {\n  return a.ratio - b.ratio;\n};\n\nvar getTemplate = function (opt) {\n  var templatePath = path.join(process.cwd(), opt.template);\n  return fs.readFileAsync(templatePath, 'utf8');\n};\n\nvar beautify = function (opt) {\n  return Promise.method(function (style) {\n    if (!opt.template && processor.isBeautifyable(opt)) {\n      return prettydiff.api({\n        source: style,\n        lang: 'css',\n        mode: 'beautify',\n        inchar: opt['style-indent-char'] === 'space' ? ' ' : '\\t',\n        insize: opt['style-indent-size']\n      })[0];\n    }\n    else {\n      return style;\n    }\n  });\n};\n\nvar processTemplate = Promise.method(function (source) {\n  var template = Handlebars.compile(source);\n  return template({\n    layouts: layouts\n  });\n});\n\nvar prepareProcessor = Promise.method(function (opt) {\n  try {\n    if (_.isString(opt.processor)) {\n      processor = moduleRequire(opt.processor);\n    }\n    else {\n      processor = opt.processor;\n    }\n  }\n  catch (e) {\n    log.error(e.message);\n    if (opt.cli) {\n      log.debug('Install the style processor with `npm install <processor-name> -g`');\n    }\n    else {\n      log.debug('Install the style processor with `npm install <processor-name>`');\n    }\n    throw e;\n  }\n});\n\nvar queue = function (layout, enc, cb) {\n  if (layout instanceof Error) {\n    cb(layout);\n  }\n  else {\n    if (layout) {\n      layouts.push(layout);\n      cb(null, layout);\n    }\n    else {\n      cb();\n    }\n  }\n};\n\nvar createStyle = function (opt) {\n  return function (cb) {\n    var stream = this, style;\n\n    if (opt.style) {\n      if (opt.template) {\n        style = getTemplate(opt).then(processTemplate);\n      }\n      else {\n        style = prepareProcessor(opt)\n          .catch(function (err) {\n            stream.emit('error', err);\n          })\n          .then(function () {\n            return processor.process(layouts, opt, Handlebars);\n          })\n          .then(beautify(opt));\n      }\n\n      style\n        .then(function (res) {\n          stream.push({\n            extension: opt.template ? '' : '.' + processor.extension(opt),\n            style: new Buffer(res, 'utf-8')\n          });\n          cb();\n        });\n    }\n    else {\n      cb();\n    }\n  };\n};\n\nmodule.exports = function (opt) {\n  log = opt.logger;\n  layouts = [];\n  if (opt.dimension) {\n    opt.dimension.sort(sortByDim).reverse();\n    opt.dimension[opt.dimension.length - 1].default = true;\n    ratio = opt.dimension[opt.dimension.length - 1].ratio / opt.dimension[0].ratio;\n  }\n  else {\n    ratio = 1;\n  }\n  return through2.obj(queue, createStyle(opt));\n};\n","/home/travis/build/npmtest/node-npmtest-sprity/node_modules/sprity/lib/to-vinyl.js":"'use strict';\n\nvar _ = require('lodash');\nvar File = require('vinyl');\nvar through2 = require('through2');\nvar path = require('path');\nvar parsePath = require('parse-filepath');\n\nvar transform = function (opt) {\n  return function (obj, enc, cb) {\n    var stream = this;\n    if (obj instanceof Error) {\n      cb(obj);\n    }\n    else {\n      if (obj) {\n        if (obj.style) {\n          var filePath = parsePath(opt.style);\n          if (filePath.extname === '') {\n            filePath.extname = obj.extension;\n          }\n          stream.push(new File({\n            base: path.join(opt.out, filePath.dirname),\n            relative: path.join(filePath.dirname, filePath.name + filePath.extname),\n            path: path.join(opt.out, filePath.dirname, filePath.name + filePath.extname.toLowerCase()),\n            contents: obj.style\n          }));\n        }\n        else {\n          _.each(obj.sprites, function (sprite) {\n            stream.push(new File({\n              base: opt.out,\n              relative: sprite.name + '.' + sprite.type,\n              path: path.join(opt.out, sprite.name + '.' + sprite.type.toLowerCase()),\n              contents: sprite.contents\n            }));\n          });\n        }\n      }\n      cb();\n    }\n  };\n};\n\nmodule.exports = function (opt) {\n  return through2.obj(transform(opt));\n};\n"}